name: Daily Exercise Generator

on:
  schedule:
    - cron: "0 7 * * 1-5"
  workflow_dispatch: # Allow manual triggering from the Actions tab


permissions: # Every job inherits this unless it overrides. 
  contents: write
  issues: write


jobs:
  generate-and-issue:
    runs-on: ubuntu-latest # Spins up a clean Linux VM. Nothing from this repo exists on it yet.
    steps:
      - name: Checkout
        uses: actions/checkout@v4  # Clones my repository into this fresh runner(Ubuntu VM), so steps can see my code.
        with:
          persist-credentials: true # Checkout leaves the GitHub token in the .git/config. Later steps like git push will work automatically, because git knows the token.

      - name: Set up Python # Installs a predictable Python for the next step
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
        
      - name: Install dependencies
        run: pip install --upgrade openai

      - name: Generate index-based pointer exercise as C file (no spoilers)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python - << 'PY'
          import os, re, hashlib, textwrap
          from openai import OpenAI

          root = Path(".")
          ex_dir = root / "exercises"
          ex_dir.mkdir(exist_ok=True)

          # Determine next index 00..11
          existing = []
          for p in ex_dir.glob("exercise-*.c"):
            m = re.match(r"exercise-(\d{2})\.c$", p.name)
            if m: existing.append(int(m.group(1)))
          idx = 0 if not existing else max(existing) + 1
          if idx >= 12:
            print("All 12 exercises already generated. Exiting.")
            raise SystemExit(0)

          out_c = ex_dir / f"exercise-{idx:02d}.c"

          # Build compact history (titles + small signature) to avoid repetition
          history = []
          for p in sorted(ex_dir.glob("exercise-*.c")):
            with open(p, "r", encoding="utf-8", errors="ignore") as f:
              head = "".join(f.readlines()[:30])  # first ~30 lines of comments
            sig = hashlib.sha1(head.encode("utf-8")).hexdigest()[:10]
            first_title = ""
            for line in head.splitlines():
              if line.strip().startswith("Title:"):
                first_title = line.strip()
                break
            history.append(f"{p.name}: {first_title or '(no-title)'} (sig:{sig})")

          system = """You are a rigorous C tutor generating ONE focused daily exercise.
          RULES:
          - Scope: C pointers only (pointer-to-pointer T**, array-to-pointer decay, const-correctness on pointers,
            function parameter semantics & ownership, malloc/free + lifetime, small pointer arithmetic, passing arrays,
            void* boundaries; optional brief function-pointer quirks). Keep exercises micro-sized.
          - Absolutely NO algorithms or data structures (no linked lists, stacks, queues, hash tables, sorting, etc.).
          - No solutions. No hints. No starter code. No TODOs.
          - Output must be plain text suitable for embedding inside a C block comment.
          - Provide: Title, Learning Objective (≤2 lines), Constraints, Problem Statement,
            and 3–5 Scenario Checks (expected behavior described in prose, NOT code)."""

          user = f"""Create exercise #{idx:02d} (3–15 lines of code expected to solve).
          Prioritize reasoning: when to pass T* vs T**, const placement, aliasing/ownership, correct lifetime decisions.
          Do NOT repeat previous exercises' semantics. Previous files:
          {(chr(10)).join(history) if history else "(none)"}"""

          client = OpenAI()
          resp = client.chat.completions.create(
              model="gpt-4o-mini",
              temperature=0.6,
              messages=[{"role":"system","content":system},
                        {"role":"user","content":user}],
          )
          prompt = resp.choices[0].message.content.strip()

          # Write a clean C file with only a comment header and empty main
          content = f"""/* 
  Title: (exercise {idx:02d})
  {prompt}

  INSTRUCTIONS:
  - Implement your solution in this file below.
  - Do NOT add TODO markers; write your own minimal code.
  - Keep it focused on the pointer concept; no algorithms.
*/

#include <stdio.h>
#include <stdlib.h>

int main(void) {
    // Write your few lines here. Keep it minimal and pointer-focused.
    return 0;
}
"""
          with open(out_c, "w", encoding="utf-8") as f:
            f.write(textwrap.dedent(content))
          print(f"Wrote {out_c}")
          PY

      - name: Commit new C exercise
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(exercise): add pointer exercise (index-based C)"
          file_pattern: exercises/exercise-*.c

      - name: Open Issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const { owner, repo } = context.repo;
            const branch = context.ref.replace('refs/heads/','');

            const dir = 'exercises';
            const files = fs.readdirSync(dir)
              .filter(n => /^exercise-\d{2}\.c$/.test(n))
              .sort();
            if (files.length === 0) { core.setFailed("No C exercise found."); return; }
            const latest = files[files.length - 1];
            const url = `https://github.com/${owner}/${repo}/blob/${branch}/${dir}/${latest}`;

            await github.rest.issues.create({
              owner, repo,
              title: `Pointer Exercise ${latest.slice(9,11)}`,
              labels: ['exercise','pointers'],
              body: `Your focused pointer drill is ready:\n\n- ${url}\n\n**Reminder**\n- No starter code was generated.\n- Implement the few required lines directly inside the C file's main().`
            });